# =============================================================================
# GraphMemory-IDE FastAPI Production Dockerfile
# Phase 3 Day 1: Container Orchestration & Docker Production
# Research-backed 2025 best practices implementation
# =============================================================================

# =============================================================================
# Stage 1: Base Configuration
# Establishes common base for all stages with optimal caching
# =============================================================================
FROM python:3.12-slim-bookworm AS base

# Production environment variables for optimal performance
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONHASHSEED=random \
    PYTHONPATH=/app \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_DEFAULT_TIMEOUT=100 \
    UV_COMPILE_BYTECODE=1 \
    UV_LINK_MODE=copy \
    UV_CACHE_DIR=/tmp/.uv-cache

# Security: Create non-root user early
RUN groupadd --gid 10001 appuser && \
    useradd --uid 10001 --gid appuser --shell /bin/bash --create-home appuser

# =============================================================================
# Stage 2: Builder Stage
# Handles dependency installation and compilation with caching optimization
# =============================================================================
FROM base AS builder

# Install system dependencies required for building Python packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    git \
    pkg-config \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install modern uv package manager (>10x faster than pip)
COPY --from=ghcr.io/astral-sh/uv:0.4.9 /uv /bin/uv

# Set working directory for build process
WORKDIR /app

# Copy dependency management files first for optimal layer caching
COPY requirements.txt pyproject.toml* ./

# Install dependencies using uv with cache mount for faster rebuilds
RUN --mount=type=cache,target=/tmp/.uv-cache \
    if [ -f pyproject.toml ]; then \
        uv pip install --system -r pyproject.toml; \
    else \
        uv pip install --system -r requirements.txt; \
    fi

# Install additional FastAPI production dependencies
RUN --mount=type=cache,target=/tmp/.uv-cache \
    uv pip install --system \
    uvicorn[standard]==0.31.1 \
    gunicorn==23.0.0 \
    prometheus-client==0.21.1 \
    python-multipart==0.0.20 \
    httpx==0.28.1

# Copy application source code (separate layer for cache efficiency)
COPY server/ ./server/
COPY dashboard/utils/ ./dashboard/utils/
COPY shared/ ./shared/

# Create optimized bytecode and precompile modules
RUN python -m compileall -b . && \
    find . -name "*.py" -delete && \
    find . -name "__pycache__" -type d -exec rm -rf {} + || true

# =============================================================================
# Stage 3: Production Runtime
# Minimal runtime environment with only necessary components
# =============================================================================
FROM base AS production

# Install only runtime system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy Python environment and application from builder
COPY --from=builder --chown=appuser:appuser /usr/local /usr/local
COPY --from=builder --chown=appuser:appuser /app /app

# Create required directories with proper permissions
RUN mkdir -p /app/logs /app/data /app/tmp && \
    chown -R appuser:appuser /app

# Switch to non-root user for security
USER appuser

# Set working directory
WORKDIR /app

# Health check for production readiness
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose FastAPI port
EXPOSE 8000

# Production startup script with graceful handling
COPY --chown=appuser:appuser docker/production/scripts/fastapi-entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Production command with optimized settings
CMD ["/entrypoint.sh"]

# =============================================================================
# Metadata and Labels for Production Tracking
# =============================================================================
LABEL maintainer="GraphMemory-IDE Team" \
      version="3.0.0" \
      description="GraphMemory-IDE FastAPI Production Backend" \
      component="api-server" \
      tier="backend" \
      environment="production" \
      build-date="" \
      vcs-url="https://github.com/user/GraphMemory-IDE" \
      vcs-ref="" \
      schema-version="1.0"

# =============================================================================
# Stage 4: Development Override (Optional)
# Development-specific optimizations when needed
# =============================================================================
FROM production AS development

# Switch back to root for development tools installation
USER root

# Install development dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    vim \
    htop \
    strace \
    && rm -rf /var/lib/apt/lists/*

# Install development Python packages
RUN --mount=type=cache,target=/tmp/.uv-cache \
    /bin/uv pip install --system \
    pytest==8.3.5 \
    pytest-asyncio==1.0.0 \
    black==25.1.0 \
    flake8==7.2.0

# Override for development mode
USER appuser
CMD ["uvicorn", "server.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# =============================================================================
# Build Arguments for Customization
# =============================================================================
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

# Apply build arguments to labels
LABEL build-date=${BUILD_DATE} \
      vcs-ref=${VCS_REF} \
      version=${VERSION} 