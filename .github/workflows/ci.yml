name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 server/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 server/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Test with pytest
      run: |
        PYTHONPATH=. pytest server/ --maxfail=3 --disable-warnings -v --cov=server --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  docker:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        cd docker
        docker compose build mcp-server

    - name: Test Docker Compose configuration
      run: |
        cd docker
        docker compose config

    - name: Start services and test
      run: |
        cd docker
        docker compose up -d
        sleep 30
        
        # Test MCP server health
        curl -f http://localhost:8080/docs || exit 1
        
        # Test API endpoints
        curl -f http://localhost:8080/openapi.json || exit 1
        curl -f http://localhost:8080/telemetry/list || exit 1
        
        docker compose down

  documentation:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check documentation files exist
      run: |
        test -f README.md
        test -f DOCUMENTATION.md
        test -f server/README.md
        test -f docker/README.md
        test -f docker/VOLUME_MANAGEMENT.md
        test -f docker/VOLUME_RESEARCH_SUMMARY.md

    - name: Validate documentation links
      run: |
        # Check that main README references key documentation
        grep -q "DOCUMENTATION.md" README.md
        grep -q "server/README.md" README.md
        grep -q "docker/README.md" README.md

    - name: Run documentation validator
      run: |
        chmod +x scripts/validate-docs.sh
        # Run validator but don't fail on service checks since they're not running
        ./scripts/validate-docs.sh || true

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  release:
    runs-on: ubuntu-latest
    needs: [test, docker, documentation]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog generation
        echo "## Changes" > CHANGELOG.md
        git log --oneline --since="1 week ago" >> CHANGELOG.md

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false 