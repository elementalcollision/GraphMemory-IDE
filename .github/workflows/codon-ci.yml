name: Condon CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM for security scans

env:
  PYTHON_VERSION: '3.13'
  CODON_VERSION: 'latest'
  DOCKER_REGISTRY: 'ghcr.io'
  IMAGE_NAME: 'graphmemory-ide'

jobs:
  # Thread Safety Validation
  thread-safety:
    name: Thread Safety Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Condon
        run: |
          /bin/bash -c "$(curl -fsSL https://exaloop.io/install.sh)"
          echo "$HOME/.codon/bin" >> $GITHUB_PATH
          
      - name: Create virtual environment
        run: |
          python -m venv codon-dev-env
          source codon-dev-env/bin/activate
          pip install --upgrade pip setuptools wheel
          
      - name: Install dependencies
        run: |
          source codon-dev-env/bin/activate
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install -r requirements-test.txt
          
      - name: Run thread safety tests
        run: |
          source codon-dev-env/bin/activate
          python -m pytest tests/thread_safety/ -v --tb=short --junitxml=thread-safety-results.xml
          
      - name: Upload thread safety test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: thread-safety-results
          path: thread-safety-results.xml

  # Condon Compilation and Testing
  codon-compilation:
    name: Condon Compilation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: thread-safety
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Condon
        run: |
          /bin/bash -c "$(curl -fsSL https://exaloop.io/install.sh)"
          echo "$HOME/.codon/bin" >> $GITHUB_PATH
          
      - name: Verify Condon installation
        run: |
          codon --version
          codon run --help
          
      - name: Compile analytics modules
        run: |
          # Compile performance-critical analytics modules
          codon build -release server/analytics/algorithms.py -o analytics_algorithms
          codon build -release server/analytics/alerting_system.py -o alerting_system
          codon build -release monitoring/ai_detection/anomaly_detector.py -o anomaly_detector
          
      - name: Run Condon performance tests
        run: |
          # Test compiled modules
          ./analytics_algorithms --test
          ./alerting_system --test
          ./anomaly_detector --test
          
      - name: Cleanup compiled binaries
        if: always()
        run: |
          rm -f analytics_algorithms alerting_system anomaly_detector

  # Security and Code Quality
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Bandit security scan
        run: |
          pip install bandit
          bandit -r server/ -f json -o bandit-report.json
          
      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
          
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            semgrep-results.sarif

  # Performance Benchmarking
  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [thread-safety, codon-compilation]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Condon
        run: |
          /bin/bash -c "$(curl -fsSL https://exaloop.io/install.sh)"
          echo "$HOME/.codon/bin" >> $GITHUB_PATH
          
      - name: Run performance benchmarks
        run: |
          source codon-dev-env/bin/activate
          python -m pytest tests/thread_safety/test_thread_performance.py::test_thread_performance_benchmarking -v
          python -m pytest tests/performance/ -v --benchmark-only
          
      - name: Generate performance report
        run: |
          echo "Performance benchmark completed at $(date)" > performance-report.txt
          echo "Thread safety validation: PASSED" >> performance-report.txt
          echo "Condon compilation: PASSED" >> performance-report.txt
          
      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance-report.txt

  # Docker Build and Push
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [thread-safety, codon-compilation, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/production/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Kubernetes Deployment
  kubernetes-deploy:
    name: Kubernetes Deployment
    runs-on: ubuntu-latest
    needs: [docker-build, performance-benchmark]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_DATA }}
          
      - name: Deploy to Kubernetes
        run: |
          # Apply Kubernetes manifests
          kubectl apply -f kubernetes/manifests/
          
          # Wait for deployment to be ready
          kubectl rollout status deployment/graphmemory-ide -n default --timeout=300s
          
      - name: Verify deployment
        run: |
          # Check if pods are running
          kubectl get pods -l app=graphmemory-ide
          
          # Run health checks
          kubectl exec deployment/graphmemory-ide -- curl -f http://localhost:8000/health

  # Documentation Generation
  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: [thread-safety, codon-compilation]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Generate API documentation
        run: |
          pip install sphinx sphinx-rtd-theme
          cd docs
          make html
          
      - name: Generate thread safety documentation
        run: |
          # Generate thread safety report
          python -m pytest tests/thread_safety/ --junitxml=thread-safety-report.xml
          python scripts/generate_thread_safety_report.py
          
      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: |
            docs/_build/html/
            thread-safety-report.html

  # Notification
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [thread-safety, codon-compilation, security-scan, performance-benchmark, docker-build, kubernetes-deploy, documentation]
    if: always()
    
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "✅ All CI/CD pipeline stages completed successfully!"
          echo "Thread safety validation: PASSED"
          echo "Condon compilation: PASSED"
          echo "Security scan: PASSED"
          echo "Performance benchmark: PASSED"
          echo "Docker build: PASSED"
          echo "Kubernetes deployment: PASSED"
          echo "Documentation generation: PASSED"
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ CI/CD pipeline failed!"
          echo "Please check the logs for details." 