# GraphMemory-IDE Application Deployments
# FastAPI, Streamlit, and Analytics services with production configuration
# Based on 2025 Kubernetes Deployment best practices

---
# FastAPI Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fastapi
  namespace: graphmemory-prod
  labels:
    app.kubernetes.io/name: fastapi
    app.kubernetes.io/instance: graphmemory-fastapi
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: graphmemory-ide
    app.kubernetes.io/managed-by: helm
    tier: backend
spec:
  replicas: 3  # High availability
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: fastapi
      app.kubernetes.io/instance: graphmemory-fastapi
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fastapi
        app.kubernetes.io/instance: graphmemory-fastapi
        app.kubernetes.io/component: backend
        app.kubernetes.io/part-of: graphmemory-ide
        tier: backend
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
        config.checksum: "{{ .Values.config.checksum }}"  # Force restart on config change
    spec:
      serviceAccountName: graphmemory-service-account
      securityContext:
        runAsUser: 10001        # Non-root user from Dockerfile
        runAsGroup: 10001
        runAsNonRoot: true
        fsGroup: 10001
        seccompProfile:
          type: RuntimeDefault
      
      # Pod anti-affinity for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: fastapi
              topologyKey: kubernetes.io/hostname
        
        # Prefer nodes with database pods for reduced latency
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 50
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  tier: database
              topologyKey: kubernetes.io/hostname
      
      containers:
      - name: fastapi
        image: graphmemory-ide/fastapi:v1.0.0  # From Day 1 Docker build
        imagePullPolicy: IfNotPresent
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop: ["ALL"]
        
        # Environment variables from ConfigMap and Secrets
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: DEBUG
          value: "false"
        - name: LOG_LEVEL
          value: "INFO"
        - name: WORKERS
          value: "4"
        - name: HOST
          value: "0.0.0.0"
        - name: PORT
          value: "8000"
        
        # Database connection
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: postgresql-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: redis-url
        
        # JWT and security
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: jwt-secret
        - name: CORS_ORIGINS
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: cors-origins
        
        # Analytics configuration
        - name: ANALYTICS_ENGINE_URL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: analytics-engine-url
        
        # Resource limits and requests
        resources:
          requests:
            cpu: "200m"
            memory: "512Mi"
          limits:
            cpu: "1000m"
            memory: "2Gi"
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        
        startupProbe:
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30  # 5 minutes startup time
        
        # Ports
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 8080
          protocol: TCP
        
        # Volume mounts for temporary files
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: app-logs
          mountPath: /app/logs
        - name: app-config-volume
          mountPath: /app/config
          readOnly: true
      
      volumes:
      - name: tmp
        emptyDir: {}
      - name: app-logs
        emptyDir: {}
      - name: app-config-volume
        configMap:
          name: app-config

---
# Streamlit Dashboard Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: streamlit
  namespace: graphmemory-prod
  labels:
    app.kubernetes.io/name: streamlit
    app.kubernetes.io/instance: graphmemory-streamlit
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/component: frontend
    app.kubernetes.io/part-of: graphmemory-ide
    app.kubernetes.io/managed-by: helm
    tier: frontend
spec:
  replicas: 2  # Moderate availability for frontend
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: streamlit
      app.kubernetes.io/instance: graphmemory-streamlit
  template:
    metadata:
      labels:
        app.kubernetes.io/name: streamlit
        app.kubernetes.io/instance: graphmemory-streamlit
        app.kubernetes.io/component: frontend
        app.kubernetes.io/part-of: graphmemory-ide
        tier: frontend
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8501"
        prometheus.io/path: "/_stcore/metrics"
    spec:
      serviceAccountName: graphmemory-service-account
      securityContext:
        runAsUser: 10002        # Non-root user from Dockerfile
        runAsGroup: 10002
        runAsNonRoot: true
        fsGroup: 10002
        seccompProfile:
          type: RuntimeDefault
      
      # Pod anti-affinity for availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: streamlit
              topologyKey: kubernetes.io/hostname
      
      containers:
      - name: streamlit
        image: graphmemory-ide/streamlit:v1.0.0  # From Day 1 Docker build
        imagePullPolicy: IfNotPresent
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10002
          capabilities:
            drop: ["ALL"]
        
        # Environment variables
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: STREAMLIT_SERVER_PORT
          value: "8501"
        - name: STREAMLIT_SERVER_ADDRESS
          value: "0.0.0.0"
        - name: STREAMLIT_SERVER_HEADLESS
          value: "true"
        - name: STREAMLIT_BROWSER_GATHER_USAGE_STATS
          value: "false"
        - name: STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION
          value: "true"
        - name: STREAMLIT_SERVER_ENABLE_CORS
          value: "false"
        
        # FastAPI backend connection
        - name: FASTAPI_URL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: fastapi-url
        
        # Authentication
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: jwt-secret
        
        # Resource limits
        resources:
          requests:
            cpu: "100m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "1Gi"
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /_stcore/health
            port: 8501
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /_stcore/health
            port: 8501
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /_stcore/health
            port: 8501
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 20  # 3+ minutes startup
        
        # Ports
        ports:
        - name: http
          containerPort: 8501
          protocol: TCP
        
        # Volume mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: streamlit-cache
          mountPath: /app/.streamlit
      
      volumes:
      - name: tmp
        emptyDir: {}
      - name: streamlit-cache
        emptyDir: {}

---
# Analytics Engine Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: analytics
  namespace: graphmemory-prod
  labels:
    app.kubernetes.io/name: analytics
    app.kubernetes.io/instance: graphmemory-analytics
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/component: analytics
    app.kubernetes.io/part-of: graphmemory-ide
    app.kubernetes.io/managed-by: helm
    tier: analytics
spec:
  replicas: 2  # Analytics processing availability
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: analytics
      app.kubernetes.io/instance: graphmemory-analytics
  template:
    metadata:
      labels:
        app.kubernetes.io/name: analytics
        app.kubernetes.io/instance: graphmemory-analytics
        app.kubernetes.io/component: analytics
        app.kubernetes.io/part-of: graphmemory-ide
        tier: analytics
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: graphmemory-service-account
      securityContext:
        runAsUser: 10003        # Non-root user from Dockerfile
        runAsGroup: 10003
        runAsNonRoot: true
        fsGroup: 10003
        seccompProfile:
          type: RuntimeDefault
      
      # Pod anti-affinity for availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: analytics
              topologyKey: kubernetes.io/hostname
        
        # Prefer nodes with database pods for data locality
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 80
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  tier: database
              topologyKey: kubernetes.io/hostname
      
      containers:
      - name: analytics
        image: graphmemory-ide/analytics:v1.0.0  # From Day 1 Docker build
        imagePullPolicy: IfNotPresent
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10003
          capabilities:
            drop: ["ALL"]
        
        # Environment variables
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: ANALYTICS_PORT
          value: "8080"
        - name: METRICS_PORT
          value: "9090"
        
        # Database connections
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: postgresql-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: redis-url
        - name: KUZU_DATABASE_PATH
          value: "/app/data/kuzu"
        
        # Analytics configuration
        - name: PROCESSING_WORKERS
          value: "4"
        - name: BATCH_SIZE
          value: "1000"
        - name: CACHE_TTL
          value: "300"  # 5 minutes
        
        # Memory optimization
        - name: MALLOC_TRIM_THRESHOLD_MB
          value: "100"
        - name: PYTHONMALLOC
          value: "pymalloc"
        - name: PYTHONOPTIMIZE
          value: "2"
        
        # Resource limits - Higher for analytics workload
        resources:
          requests:
            cpu: "300m"
            memory: "1Gi"
          limits:
            cpu: "2000m"
            memory: "4Gi"
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 45
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 20
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 20  # 5+ minutes for analytics initialization
        
        # Ports
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        # Volume mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: analytics-data
          mountPath: /app/data
        - name: analytics-cache
          mountPath: /app/cache
        - name: analytics-logs
          mountPath: /app/logs
      
      volumes:
      - name: tmp
        emptyDir: {}
      - name: analytics-data
        emptyDir:
          sizeLimit: 5Gi  # Temporary analytics data
      - name: analytics-cache
        emptyDir:
          sizeLimit: 2Gi  # Analytics cache
      - name: analytics-logs
        emptyDir:
          sizeLimit: 1Gi  # Log storage

---
# Service for FastAPI Backend
apiVersion: v1
kind: Service
metadata:
  name: fastapi-service
  namespace: graphmemory-prod
  labels:
    app.kubernetes.io/name: fastapi
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: graphmemory-ide
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 8080
    targetPort: metrics
    protocol: TCP
  selector:
    app.kubernetes.io/name: fastapi
    app.kubernetes.io/instance: graphmemory-fastapi

---
# Service for Streamlit Frontend
apiVersion: v1
kind: Service
metadata:
  name: streamlit-service
  namespace: graphmemory-prod
  labels:
    app.kubernetes.io/name: streamlit
    app.kubernetes.io/component: frontend
    app.kubernetes.io/part-of: graphmemory-ide
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8501
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/name: streamlit
    app.kubernetes.io/instance: graphmemory-streamlit

---
# Service for Analytics Engine
apiVersion: v1
kind: Service
metadata:
  name: analytics-service
  namespace: graphmemory-prod
  labels:
    app.kubernetes.io/name: analytics
    app.kubernetes.io/component: analytics
    app.kubernetes.io/part-of: graphmemory-ide
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app.kubernetes.io/name: analytics
    app.kubernetes.io/instance: graphmemory-analytics

---
# Service for PostgreSQL Database
apiVersion: v1
kind: Service
metadata:
  name: postgresql-service
  namespace: graphmemory-prod
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: graphmemory-ide
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
    protocol: TCP
  - name: metrics
    port: 9187
    targetPort: metrics
    protocol: TCP
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: graphmemory-postgresql

---
# Service for Redis Cache
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: graphmemory-prod
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
    app.kubernetes.io/part-of: graphmemory-ide
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: redis
    protocol: TCP
  - name: metrics
    port: 9121
    targetPort: metrics
    protocol: TCP
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: graphmemory-redis 