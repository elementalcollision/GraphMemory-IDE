# GraphMemory-IDE ConfigMaps and Secrets
# Production configuration management with environment-specific settings
# Based on 2025 Kubernetes configuration best practices

---
# Application Configuration ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: graphmemory-prod
  labels:
    app.kubernetes.io/name: configmap
    app.kubernetes.io/component: config
    app.kubernetes.io/part-of: graphmemory-ide
    app.kubernetes.io/managed-by: helm
  annotations:
    config.kubernetes.io/description: "Main application configuration for GraphMemory-IDE"
data:
  # Environment settings
  ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
  DEBUG: "false"
  
  # Service URLs (internal cluster communication)
  fastapi-url: "http://fastapi-service.graphmemory-prod.svc.cluster.local:8000"
  analytics-engine-url: "http://analytics-service.graphmemory-prod.svc.cluster.local:8080"
  streamlit-url: "http://streamlit-service.graphmemory-prod.svc.cluster.local:8501"
  
  # External URLs
  external-dashboard-url: "https://graphmemory.example.com"
  external-api-url: "https://api.graphmemory.example.com"
  
  # CORS configuration
  cors-origins: |
    [
      "https://graphmemory.example.com",
      "https://api.graphmemory.example.com",
      "https://localhost:8501",
      "https://localhost:3000"
    ]
  
  # Analytics Engine Configuration
  analytics-workers: "4"
  analytics-batch-size: "1000"
  analytics-cache-ttl: "300"
  analytics-max-memory: "4Gi"
  
  # FastAPI Configuration
  fastapi-workers: "4"
  fastapi-max-requests: "1000"
  fastapi-timeout: "30"
  
  # Streamlit Configuration
  streamlit-theme: "dark"
  streamlit-max-upload-size: "200"
  streamlit-session-timeout: "3600"
  
  # Rate Limiting
  rate-limit-requests-per-minute: "100"
  rate-limit-burst: "20"
  api-rate-limit-requests-per-minute: "300"
  api-rate-limit-burst: "50"
  
  # Monitoring Configuration
  metrics-enabled: "true"
  metrics-port: "8080"
  health-check-interval: "30"
  
  # Feature Flags
  enable-experimental-features: "false"
  enable-detailed-logging: "true"
  enable-performance-monitoring: "true"
  enable-security-headers: "true"

---
# PostgreSQL Configuration ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-config
  namespace: graphmemory-prod
  labels:
    app.kubernetes.io/name: configmap
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: graphmemory-ide
data:
  postgresql.conf: |
    # PostgreSQL Production Configuration
    # Optimized for analytics workload
    
    # Connection Settings
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    superuser_reserved_connections = 3
    
    # Memory Settings (for 2GB container limit)
    shared_buffers = 512MB
    effective_cache_size = 1536MB
    work_mem = 4MB
    maintenance_work_mem = 128MB
    
    # WAL Settings
    wal_level = replica
    max_wal_size = 1GB
    min_wal_size = 80MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    
    # Query Planner
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_min_messages = warning
    log_min_error_statement = error
    log_min_duration_statement = 1000
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_lock_waits = on
    log_statement = 'ddl'
    
    # Statistics
    track_activities = on
    track_counts = on
    track_io_timing = on
    track_functions = all
    
    # Autovacuum
    autovacuum = on
    autovacuum_max_workers = 3
    autovacuum_naptime = 60s

---
# PostgreSQL Initialization Scripts ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-init-scripts
  namespace: graphmemory-prod
  labels:
    app.kubernetes.io/name: configmap
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: graphmemory-ide
data:
  01-create-databases.sql: |
    -- Create additional databases for GraphMemory-IDE
    CREATE DATABASE analytics_data;
    CREATE DATABASE session_store;
    CREATE DATABASE audit_logs;
    
    -- Create extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    
    -- Create analytics user
    CREATE USER analytics_user WITH PASSWORD 'ANALYTICS_PASSWORD_PLACEHOLDER';
    GRANT CONNECT ON DATABASE analytics_data TO analytics_user;
    GRANT ALL PRIVILEGES ON DATABASE analytics_data TO analytics_user;
    
    -- Create session user
    CREATE USER session_user WITH PASSWORD 'SESSION_PASSWORD_PLACEHOLDER';
    GRANT CONNECT ON DATABASE session_store TO session_user;
    GRANT ALL PRIVILEGES ON DATABASE session_store TO session_user;

  02-create-tables.sql: |
    -- Connect to analytics database
    \c analytics_data;
    
    -- Create analytics tables
    CREATE TABLE IF NOT EXISTS system_metrics (
        id SERIAL PRIMARY KEY,
        timestamp TIMESTAMPTZ DEFAULT NOW(),
        cpu_usage DECIMAL(5,2),
        memory_usage DECIMAL(5,2),
        disk_usage DECIMAL(5,2),
        network_io BIGINT,
        metadata JSONB
    );
    
    CREATE TABLE IF NOT EXISTS memory_insights (
        id SERIAL PRIMARY KEY,
        timestamp TIMESTAMPTZ DEFAULT NOW(),
        total_entities INTEGER,
        total_relations INTEGER,
        memory_efficiency DECIMAL(5,2),
        insights JSONB
    );
    
    CREATE TABLE IF NOT EXISTS graph_metrics (
        id SERIAL PRIMARY KEY,
        timestamp TIMESTAMPTZ DEFAULT NOW(),
        node_count INTEGER,
        edge_count INTEGER,
        clustering_coefficient DECIMAL(10,6),
        centrality_metrics JSONB
    );
    
    -- Create indexes
    CREATE INDEX idx_system_metrics_timestamp ON system_metrics(timestamp);
    CREATE INDEX idx_memory_insights_timestamp ON memory_insights(timestamp);
    CREATE INDEX idx_graph_metrics_timestamp ON graph_metrics(timestamp);

---
# Redis Configuration ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: graphmemory-prod
  labels:
    app.kubernetes.io/name: configmap
    app.kubernetes.io/component: cache
    app.kubernetes.io/part-of: graphmemory-ide
data:
  redis.conf: |
    # Redis Production Configuration
    # Optimized for caching and session storage
    
    # Network
    bind 0.0.0.0
    port 6379
    tcp-backlog 511
    timeout 0
    tcp-keepalive 300
    
    # General
    daemonize no
    supervised no
    pidfile /var/run/redis_6379.pid
    loglevel notice
    logfile ""
    databases 16
    
    # Snapshotting
    save 900 1
    save 300 10
    save 60 10000
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    dir /data
    
    # Replication
    replica-serve-stale-data yes
    replica-read-only yes
    
    # Security
    requirepass REDIS_PASSWORD_PLACEHOLDER
    
    # Memory Management
    maxmemory 768mb
    maxmemory-policy allkeys-lru
    maxmemory-samples 5
    
    # Lazy Freeing
    lazyfree-lazy-eviction yes
    lazyfree-lazy-expire yes
    lazyfree-lazy-server-del yes
    replica-lazy-flush yes
    
    # Append Only File
    appendonly yes
    appendfilename "appendonly.aof"
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    
    # Performance
    hash-max-ziplist-entries 512
    hash-max-ziplist-value 64
    list-max-ziplist-size -2
    set-max-intset-entries 512
    zset-max-ziplist-entries 128
    zset-max-ziplist-value 64
    hll-sparse-max-bytes 3000
    
    # Clients
    maxclients 10000

---
# Application Secrets
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: graphmemory-prod
  labels:
    app.kubernetes.io/name: secret
    app.kubernetes.io/component: security
    app.kubernetes.io/part-of: graphmemory-ide
  annotations:
    secret.kubernetes.io/description: "Application secrets for GraphMemory-IDE"
type: Opaque
data:
  # JWT Secret Key (base64 encoded)
  jwt-secret: U3VwZXJTZWNyZXRKV1RLZXlGb3JHcmFwaE1lbW9yeUlERTIwMjU=
  
  # API Keys (base64 encoded placeholders)
  analytics-api-key: QW5hbHl0aWNzQVBJS2V5UGxhY2Vob2xkZXI=
  metrics-api-key: TWV0cmljc0FQSUtleVBsYWNlaG9sZGVy
  
  # Encryption Keys
  data-encryption-key: RGF0YUVuY3J5cHRpb25LZXlQbGFjZWhvbGRlcg==
  session-encryption-key: U2Vzc2lvbkVuY3J5cHRpb25LZXlQbGFjZWhvbGRlcg==
  
  # External Service Credentials
  monitoring-webhook-token: TW9uaXRvcmluZ1dlYmhvb2tUb2tlblBsYWNlaG9sZGVy
  alert-manager-token: QWxlcnRNYW5hZ2VyVG9rZW5QbGFjZWhvbGRlcg==

---
# Database Connection Secrets
apiVersion: v1
kind: Secret
metadata:
  name: database-secret
  namespace: graphmemory-prod
  labels:
    app.kubernetes.io/name: secret
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: graphmemory-ide
  annotations:
    secret.kubernetes.io/description: "Database connection secrets"
type: Opaque
data:
  # PostgreSQL credentials (base64 encoded)
  postgresql-url: cG9zdGdyZXNxbDovL2dyYXBobWVtb3J5OnBhc3N3b3JkQHBvc3RncmVzcWwtc2VydmljZS5ncmFwaG1lbW9yeS1wcm9kLnN2Yy5jbHVzdGVyLmxvY2FsOjU0MzIvZ3JhcGhtZW1vcnk=
  
  # Redis connection URL (base64 encoded)
  redis-url: cmVkaXM6Ly86cGFzc3dvcmRAcmVkaXMtc2VydmljZS5ncmFwaG1lbW9yeS1wcm9kLnN2Yy5jbHVzdGVyLmxvY2FsOjYzNzk=

---
# PostgreSQL Specific Secrets
apiVersion: v1
kind: Secret
metadata:
  name: postgresql-secret
  namespace: graphmemory-prod
  labels:
    app.kubernetes.io/name: secret
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: graphmemory-ide
type: Opaque
data:
  # PostgreSQL user credentials (base64 encoded)
  username: Z3JhcGhtZW1vcnk=  # graphmemory
  password: U3VwZXJTZWNyZXRQYXNzd29yZDIwMjU=  # SuperSecretPassword2025
  
  # Postgres exporter DSN
  exporter-dsn: cG9zdGdyZXNxbDovL2dyYXBobWVtb3J5OlN1cGVyU2VjcmV0UGFzc3dvcmQyMDI1QGxvY2FsaG9zdDo1NDMyL2dyYXBobWVtb3J5P3NzbG1vZGU9ZGlzYWJsZQ==
  
  # Additional user passwords
  analytics-password: QW5hbHl0aWNzUGFzc3dvcmQyMDI1
  session-password: U2Vzc2lvblBhc3N3b3JkMjAyNQ==

---
# Redis Specific Secrets
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: graphmemory-prod
  labels:
    app.kubernetes.io/name: secret
    app.kubernetes.io/component: cache
    app.kubernetes.io/part-of: graphmemory-ide
type: Opaque
data:
  # Redis password (base64 encoded)
  password: UmVkaXNQYXNzd29yZDIwMjU=  # RedisPassword2025

---
# TLS and Certificate Secrets (placeholder)
apiVersion: v1
kind: Secret
metadata:
  name: tls-secrets
  namespace: graphmemory-prod
  labels:
    app.kubernetes.io/name: secret
    app.kubernetes.io/component: tls
    app.kubernetes.io/part-of: graphmemory-ide
type: Opaque
data:
  # CA Certificate (base64 encoded placeholder)
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t...
  
  # Client certificates for internal communication
  client.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t...
  client.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t...

---
# Monitoring Configuration ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: monitoring-config
  namespace: graphmemory-prod
  labels:
    app.kubernetes.io/name: configmap
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: graphmemory-ide
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      - "graphmemory_rules.yml"
    
    scrape_configs:
      - job_name: 'graphmemory-fastapi'
        static_configs:
          - targets: ['fastapi-service:8080']
        metrics_path: '/metrics'
        scrape_interval: 30s
      
      - job_name: 'graphmemory-analytics'
        static_configs:
          - targets: ['analytics-service:9090']
        metrics_path: '/metrics'
        scrape_interval: 30s
      
      - job_name: 'graphmemory-postgresql'
        static_configs:
          - targets: ['postgresql-service:9187']
        metrics_path: '/metrics'
        scrape_interval: 30s
      
      - job_name: 'graphmemory-redis'
        static_configs:
          - targets: ['redis-service:9121']
        metrics_path: '/metrics'
        scrape_interval: 30s
  
  graphmemory_rules.yml: |
    groups:
      - name: graphmemory_alerts
        rules:
          - alert: HighCPUUsage
            expr: rate(container_cpu_usage_seconds_total[5m]) > 0.8
            for: 2m
            labels:
              severity: warning
            annotations:
              summary: "High CPU usage detected"
              description: "CPU usage is above 80% for more than 2 minutes"
          
          - alert: HighMemoryUsage
            expr: container_memory_usage_bytes / container_spec_memory_limit_bytes > 0.9
            for: 2m
            labels:
              severity: critical
            annotations:
              summary: "High memory usage detected"
              description: "Memory usage is above 90% for more than 2 minutes"
          
          - alert: DatabaseConnectionFailure
            expr: up{job="graphmemory-postgresql"} == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "PostgreSQL database is down"
              description: "Cannot connect to PostgreSQL database"

---
# Grafana Dashboard Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: graphmemory-prod
  labels:
    app.kubernetes.io/name: configmap
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: graphmemory-ide
    grafana_dashboard: "1"
data:
  graphmemory-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "GraphMemory-IDE Overview",
        "tags": ["graphmemory", "production"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "System Metrics",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(container_cpu_usage_seconds_total{pod=~\".*graphmemory.*\"}[5m])",
                "legendFormat": "CPU Usage"
              }
            ]
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    } 